; Program for generating system clock
.program i2s_sck
.wrap_target
    set pins, 1
    set pins, 0
.wrap

; Program for receiving I2S audio data from master CODEC.
; Input pins are sequential in this order: DIN, BCLK, LRCLK.

.program i2s_din
.wrap_target

; Wait for the falling transition of the LRCK.  This 
; ensures that we always start at the beginning of a
; left-side word.
;
; LRCK has been mapped as input pin 2.
    wait 1 pin 2
    wait 0 pin 2

; NOTICE: The initial right-side word placed on the RX FIFO will 
; be garbage.

; Here we deal with the first bit of the L window, which 
; is really just the end of the right-side word`.
start_sample_l:

; Wait for the rising transition of the BCK
; Parameter 0: "1" means wait for a 1.
; Parameter 1: "pin" means waiting on a mapped pin.
; Parameter 2: "1" means pin 1 (i.e. the second pin)
; BCK has been mapped as input pin 1.
    wait 1 pin 1
; Pull a bit from the DIN pin and into the ISR.  This will 
; be the LSB of the previous right-side word.
; Parameter 1: "1" means 1 bit is read
; DIN has been mapped as input pin 0.
    in pins, 1
; Put the received data in the ISR onto the RX FIFO. 
; The ISR is cleared automatically.
    push noblock
; Wait for the falling transition of the BCK
    wait 0 pin 1
; Confirm the falling transition of the LRCK
    wait 0 pin 2
sample_l:
; Wait for the rising transition of the BCK
    wait 1 pin 1
; Pull a bit from the DIN pin
    in pins, 1
; Wait for the falling transition of the BCK
    wait 0 pin 1
; If the LRCK goes high then we're (almost) finished 
; with the left word so move to the right collection.
;
; The jump condition tests to see if the pin is high.
; NOTE: This depends on the LRCK pin having been mapped
; as the jump pin!
    jmp pin start_sample_r
; Otherwise keep looping through the left-side word collection.
    jmp sample_l 
start_sample_r:
; Wait for the rising transition of the BCLK
    wait 1 pin 1
; Pull a bit from the DIN pin.  This will be the LSB of 
; the previous left-side word.
    in pins, 1 
; Put the received data onto the FIFO
    push noblock
; Wait for the falling transition of the BCK
    wait 0 pin 1
sample_r:
; Wait for the rising transition of the BCK
    wait 1 pin 1 
; Pull a bit from the DIN pin
    in pins, 1
; Wait for the falling transition of the BCK
    wait 0 pin 1
; If LRCK is still high we're still sampling the right 
; word.
;
; The jump condition tests to see if the pin is 1.
; NOTE: This depends on the LRCK pin having been mapped
; as the jump pin!
    jmp pin sample_r    
; If the LRCK pin was low then we are (almost) finished
; collecting the right-side word.    
; There's an implicit jump to start_sample_l here.
.wrap
